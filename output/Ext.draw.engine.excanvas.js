Ext.data.JsonP.Ext_draw_engine_excanvas({"tagname":"class","name":"Ext.draw.engine.excanvas","autodetected":{},"files":[{"filename":"excanvas.js","href":"excanvas.html#Ext-draw-engine-excanvas"}],"private":true,"members":[{"name":"bind","tagname":"method","owner":"Ext.draw.engine.excanvas","id":"method-bind","meta":{}},{"name":"getContext","tagname":"method","owner":"Ext.draw.engine.excanvas","id":"method-getContext","meta":{}},{"name":"initElement","tagname":"method","owner":"Ext.draw.engine.excanvas","id":"method-initElement","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Ext.draw.engine.excanvas","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/excanvas.html#Ext-draw-engine-excanvas' target='_blank'>excanvas.js</a></div></pre><div class='doc-contents'><div class='rounded-box private-box'><p><strong>NOTE:</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p></div><p>@define <a href=\"#!/api/Ext.draw.engine.excanvas\" rel=\"Ext.draw.engine.excanvas\" class=\"docClass\">Ext.draw.engine.excanvas</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-bind' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.draw.engine.excanvas'>Ext.draw.engine.excanvas</span><br/><a href='source/excanvas.html#Ext-draw-engine-excanvas-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.draw.engine.excanvas-method-bind' class='name expandable'>bind</a>( <span class='pre'>f, obj, var_args</span> ) : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Binds a function to an object. ...</div><div class='long'><p>Binds a function to an object. The returned function will always use the\npassed in {@code obj} as {@code this}.</p>\n\n<p>Example:</p>\n\n<p>  g = bind(f, obj, a, b)\n  g(c, d) // will do f.call(obj, a, b, c, d)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'><p>The function to bind the object to</p>\n</div></li><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>The object that should act as this when the function\n    is called</p>\n</div></li><li><span class='pre'>var_args</span> : *<div class='sub-desc'><p>Rest arguments that will be used as the initial\n    arguments when the function is called</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></span><div class='sub-desc'><p>A new function that has bound this</p>\n</div></li></ul></div></div></div><div id='method-getContext' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.draw.engine.excanvas'>Ext.draw.engine.excanvas</span><br/><a href='source/excanvas.html#Ext-draw-engine-excanvas-method-getContext' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.draw.engine.excanvas-method-getContext' class='name expandable'>getContext</a>( <span class='pre'></span> ) : <a href=\"#!/api/CanvasRenderingContext2D_\" rel=\"CanvasRenderingContext2D_\" class=\"docClass\">CanvasRenderingContext2D_</a><span class=\"signature\"></span></div><div class='description'><div class='short'>This funtion is assigned to the  elements as element.getContext(). ...</div><div class='long'><p>This funtion is assigned to the <canvas></canvas> elements as element.getContext().\n@this {HTMLElement}</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/CanvasRenderingContext2D_\" rel=\"CanvasRenderingContext2D_\" class=\"docClass\">CanvasRenderingContext2D_</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-initElement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.draw.engine.excanvas'>Ext.draw.engine.excanvas</span><br/><a href='source/excanvas.html#Ext-draw-engine-excanvas-method-initElement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.draw.engine.excanvas-method-initElement' class='name expandable'>initElement</a>( <span class='pre'>el</span> ) : HTMLElement<span class=\"signature\"></span></div><div class='description'><div class='short'>Public initializes a canvas element so that it can be used as canvas\nelement from now on. ...</div><div class='long'><p>Public initializes a canvas element so that it can be used as canvas\nelement from now on. This is called automatically before the page is\nloaded but if you are creating elements using createElement you need to\nmake sure this is called on the element.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>el</span> : HTMLElement<div class='sub-desc'><p>The canvas element to initialize.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>HTMLElement</span><div class='sub-desc'><p>the element that was created.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"private":true}});